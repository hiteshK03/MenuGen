---
alwaysApply: true
description: MenuGen application architecture and dual-version structure
---

# MenuGen Application Architecture

## Dual Application Structure

MenuGen has evolved into two distinct implementations:

### ðŸ¥‡ **Primary: VLM-Based Application** [`app_vlm.py`](mdc:app_vlm.py)
- **Technology**: SmolVLM2 (HuggingFaceTB/SmolVLM2-2.2B-Instruct)
- **Approach**: Direct vision-language understanding (no OCR)
- **Features**: 
  - âœ… **Auto-generates content for ALL detected dishes**
  - âœ… Intelligent menu item extraction with filtering
  - âœ… Progress tracking and organized results display
  - âœ… Robust error handling and fallbacks
- **Dependencies**: [`requirements_vlm.txt`](mdc:requirements_vlm.txt)
- **Workflow**: Upload â†’ SmolVLM2 Analysis â†’ Auto-generate All Dishes â†’ Display Results

### ðŸ¥ˆ **Legacy: OCR-Based Application** [`app.py`](mdc:app.py)
- **Technology**: Tesseract OCR + basic text parsing
- **Approach**: OCR text extraction â†’ manual dish selection
- **Features**: Single dish processing, manual interaction required
- **Dependencies**: [`requirements.txt`](mdc:requirements.txt)
- **Status**: Maintained for comparison and fallback

## Key Architectural Components

### **AI Model Pipeline**
```python
# Three cached models loaded once per session
@st.cache_resource
def load_menu_understanding_model():    # SmolVLM2 - Menu analysis
def load_ingredient_generator():        # T5 - Recipe ingredients  
def load_image_generator():            # FLUX.1 - Dish image generation
```

### **Core Processing Flow**
1. **Image Upload** â†’ Streamlit file uploader
2. **Menu Analysis** â†’ SmolVLM2 extracts all dish names
3. **Automatic Processing** â†’ Loop through all dishes
4. **Content Generation** â†’ Parallel ingredients + image generation
5. **Results Display** â†’ Expandable sections per dish

### **Enhanced User Experience** 
- **Progress Tracking**: Real-time progress bar and status updates
- **Batch Processing**: Automatic generation for all menu items
- **Organized Display**: Expandable sections with side-by-side content
- **Error Handling**: Graceful degradation with informative messages

## Model Selection Rationale

See [`MODEL_COMPARISON.md`](mdc:MODEL_COMPARISON.md) for detailed analysis.

**SmolVLM2 chosen for:**
- Ultra-efficient performance (<4GB GPU memory)
- Natural language understanding of menu layouts
- Excellent instruction following for dish extraction
- Fast inference optimized for production use

## Development Workflow

1. **Primary Development**: Focus on [`app_vlm.py`](mdc:app_vlm.py)
2. **Model Experiments**: Use test files like [`test_smolvlm.py`](mdc:test_smolvlm.py)
3. **Dependency Management**: Update [`requirements_vlm.txt`](mdc:requirements_vlm.txt)
4. **Performance Testing**: Compare against legacy version when needed