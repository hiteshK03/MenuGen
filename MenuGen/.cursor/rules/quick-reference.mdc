---
description: Quick reference guide for common MenuGen development tasks
---

# MenuGen Quick Reference

## Essential Code Patterns

### Streamlit Component Structure
```python
st.title("MenuGen: From Menu to Masterpiece")
uploaded_file = st.file_uploader("Choose a menu image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    with st.spinner("Processing..."):
        # Your processing logic here
        pass
```

### Model Loading Pattern
```python
@st.cache_resource
def load_model(model_id):
    try:
        pipe = FluxPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
        return pipe.to("cuda" if torch.cuda.is_available() else "cpu")
    except Exception as e:
        st.error(f"Model loading failed: {e}")
        return None
```

### OCR Processing Pattern
```python
def extract_text_from_image(image):
    try:
        open_cv_image = np.array(image)
        img = cv2.cvtColor(open_cv_image, cv2.COLOR_RGB2BGR)
        text = pytesseract.image_to_string(img)
        return text.strip()
    except Exception as e:
        st.error(f"OCR processing failed: {e}")
        return ""
```

## Common Issues & Solutions

| Issue | Solution |
|-------|----------|
| Model loading slow | Use `@st.cache_resource` decorator |
| GPU out of memory | Use `torch.float16` and clear cache |
| OCR poor quality | Preprocess image with OpenCV |
| Empty OCR result | Check image format and quality |
| Streamlit rerunning | Use session state for persistence |

## File Structure Reference

```
MenuGen/
├── app.py                 # Main Streamlit application
├── requirements.txt       # Python dependencies
└── .cursor/
    └── rules/            # Cursor AI rules
        ├── project-overview.mdc
        ├── streamlit-conventions.mdc
        ├── ai-ml-best-practices.mdc
        ├── dependency-management.mdc
        ├── error-handling-debugging.mdc
        └── quick-reference.mdc
```

## Development Workflow

1. **Setup**: Install dependencies with `pip install -r requirements.txt`
2. **Run**: Start with `streamlit run app.py`
3. **Debug**: Use `st.write()` for variable inspection
4. **Test**: Upload various menu images to test OCR
5. **Optimize**: Profile model loading and inference times