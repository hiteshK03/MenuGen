---
globs: *.py
description: Streamlit development conventions and best practices
---

# Streamlit Development Guidelines

## Code Organization

- Use `st.` prefix for all Streamlit components
- Group related UI elements together
- Use `with st.spinner()` for long-running operations
- Implement proper error handling with `st.error()` and `st.warning()`

## UI/UX Best Practices

- Always provide meaningful captions for images and components
- Use `st.subheader()` and `st.write()` for content hierarchy
- Implement loading states for AI model operations
- Use `st.text_area()` with appropriate height for large text displays

## Performance Considerations

- Cache expensive operations using `@st.cache_data` or `@st.cache_resource`
- Load AI models once and reuse them
- Use `torch.cuda.is_available()` to optimize for available hardware
- Consider model quantization for better performance

## State Management

- Use `st.session_state` for maintaining data across reruns
- Initialize session state variables properly
- Clear unnecessary data to prevent memory issues

## Error Handling

- Always validate user inputs before processing
- Provide helpful error messages to users
- Handle model loading failures gracefully
- Implement fallback options when AI services are unavailable